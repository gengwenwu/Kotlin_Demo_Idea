package org.logan.test.kotlin.basic.cp08

/**
 * desc: 决定何时将函数声明成内联 <br/>
 * time: 2019/12/23 11:35 上午 <br/>
 * author: Logan <br/>
 * since V 1.0 <br/>
 */

// 不建议在任何函数中使用inline，因为事实证明，这并不是一个好主意。
// 使用 inline 关键字只能提高带有 lambda 参数的函数的性能，其他的情况需要额外的度量和研究。


// 对于普通的函数调用，JVM 己经提供了强大的内联支持。它会分析代码的执行，并在任何通过内联能够带来好处的时候将函数调用内联。
// 这是在将字节码转换成机器代码时自动完成的。在字节码中，每一个函数的实现只会出现一次，而Kotlin的内联函数在每个调用的地方都拷贝一次。


// 另一方面，将带有 lambda 参数的函数内联能带来好处：
// 1，首先，通过内联避免的运行时开销更明显了。不仅节约了函数调用的开销，而且节约了为 lambda创建匿名类，以及创建 lambda 实例对象的开销。
// 2，其次，JVM 目前并没有聪明到总是能将函数调用内联。
// 3，最后，内联使得我们可以使用一些不可能被普通 lambda 使用的特性，如：非局部返回，我们将在本章的后面部分讨论它。


//  但是在使用 inline 关键字的时候，你还是应该注意代码的长度。如果你要内联的函数很大，将它的字节码拷贝到每一个调用点
//  将会极大地增加字节码的长度。在这种情况下， 你应该将那些与 lambda 参数无关的代码抽取到一个独立的非内联函数中。
//  你可以自己去验证一下，在 Kotlin 标准库中的内联函数总是很小的 。
